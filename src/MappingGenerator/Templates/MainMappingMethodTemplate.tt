<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter type="MappingGenerator.Templates.MainMappingMethodModel" name="Model" #>
var source = <#=Model.MethodDefinition.Signature.Parameters.First().Name#>(default(<#=Utils.BuildTypeNameOfAVariable(Model.Mapping.Destination)#>));
if (source == default(<#=Utils.BuildTypeNameOfAVariable(Model.Mapping.Source)#>))
{
    return default(<#=Utils.BuildTypeNameOfAVariable(Model.Mapping.Destination)#>);
}
<#=Utils.BuildTypeNameOfAVariable(Model.Mapping.Destination)#> destination;
destination = <#=Conventions.MethodForCreateDestination(Model.Mapping.Source, Model.Mapping.Destination).Signature.Name#>(source);
<# 
    foreach (var mappingRule in Model.Mapping.PropertiesMappingRules)
    {
        var method = Model.PropertyMappingMethods.First(x => x.ReturnType == mappingRule.Destination.Type &&
                    x.Signature.Name ==
                    Conventions.MapToPropertyMethodName(mappingRule.Source.Name, mappingRule.Destination.Name));
#>
<#=Model.DestinationVariableName#>.<#=mappingRule.Destination.Name#> = <#=method.Signature.Name#>(source);
<# 
    }
 #>
return <#=Model.DestinationVariableName#>;
