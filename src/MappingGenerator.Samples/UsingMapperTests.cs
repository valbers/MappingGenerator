using MappingGenerator.Samples.Mapping.AutoGenerated;
using Ploeh.AutoFixture;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Xunit;

namespace MappingGenerator.Samples
{
    public class UsingMapperTests
    {
        private MapperUser _mapperUser;
        private IMapper _mapper;
        private IFixture _fixture;

        public UsingMapperTests()
        {
            _mapper = new Mapper();
            _mapperUser = new MapperUser(_mapper);

            _fixture = new Fixture().Customize(new MultipleCustomization());
        }

        [Fact]
        public void mapping_class1_to_class1peer_is_easy()
        {
            var class1 = _fixture.Create<MappingGenerator.Samples.Domain1.Class1>();

            var class1Peer = _mapperUser.Work(class1);

            Assert.Equal(class1.MyInteger, class1Peer.MyInteger);
            Assert.Equal(class1.MyString, class1Peer.MyString);
            Assert.Equal(class1.MyNullableDouble, class1Peer.MyNullableDouble);
            Assert.Equal(class1.MyClass2.MyString, class1Peer.MyClass2.MyString);
            Assert.Equal(class1.MyListOfStrings, class1Peer.MyListOfStrings);
            Assert.NotSame(class1.MyListOfStrings, class1Peer.MyListOfStrings);
            AreEquivalentIEnumerables(class1.MyListOfStrings2, class1Peer.MyListOfStrings2);
            AreEquivalentIEnumerables(class1.MyListOfStrings3, class1Peer.MyListOfStrings3);
        }

        private void AreEquivalentIEnumerables(IEnumerable<string> enumerable1, IEnumerable<string> enumerable2)
        {
            Assert.False(enumerable1 == null && enumerable2 != null ||
                         enumerable2 == null && enumerable1 != null);
                
            var enumerator1 = enumerable1.GetEnumerator();
            var enumerator2 = enumerable2.GetEnumerator();
            while(enumerator1.MoveNext() & enumerator2.MoveNext())
            {
                Assert.Equal(enumerator1.Current, enumerator2.Current);
            }
        }
    }
}
